<?php
/**
 * @file
 */

/**
 * Implements hook_uninstall().
 */
function up_uninstall() {
  variable_del('up_client_id');
  variable_del('up_app_secret');
}

/**
 * Implements hook_schema().
 */
function up_schema() {
  $schema['up_band'] = array(
    'description' => "Stores individual UP band information.",
    'fields' => array(
      'bid' => array(
        'description' => "The unique {up_band} internal band id.",
        'type' => 'serial',
      ),
      'xid' => array(
        'description' => "Unique API identifier of the {up} band.",
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 64,
      ),
      'uid' => array(
        'description' => "The uid of the user who added this {up} band.",
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'first_name' => array(
        'description' => "The user's first name as provided by the UP API.",
        'type' => 'varchar',
        'length' => 255,
      ),
      'last_name' => array(
        'description' => "The user's last name as provided by the UP API.",
        'type' => 'varchar',
        'length' => 255,
      ),
      'image_url' => array(
        'description' => "The url of the {up}'s profile image.",
        'type' => 'varchar',
        'length' => 255,
      ),
    ),
    'primary key' => array('bid'),
    'indexes' => array(
      'uid' => array('uid'),
    ),
    'unique' => array(
      'xid' => array('xid'),
    ),
    'foreign keys' => array(
      'uid' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
  );

  $schema['up_token'] = array(
    'description' => 'Stores authentication tokens for UP bands.',
    'fields' => array(
      'tid' => array(
        'description' => 'The unique tid for this token.',
        'type' => 'serial',
      ),
      'uid' => array(
        'description' => 'The {users}.uid for this token.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'token' => array(
        'description' => 'The token for oauth-based access.',
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 128,
      ),
      'refresh_token' => array(
        'description' => 'The refresh_token that can be used to replace an expiring token.',
        'type' => 'varchar',
        'length' => 128,
      ),
      'expires' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp for current token expiry.',
      ),
    ),
    'primary key' => array('tid'),
    'indexes' => array(
      'uid'     => array('uid'),
      'expires' => array('expires'),
    ),
    'foreign keys' => array(
      'uid' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
  );

  $schema['up_ticks'] = array(
    'description' => "Stores individual UP activities.",
    'fields' => array(
      'tid' => array(
        'description' => "The unique {up_ticks} activity id.",
        'type' => 'serial',
      ),
      'bid' => array(
        'description' => "The {up}.bid band for this {up_tick}.",
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'distance' => array(
        'description' => "The distance covered in this {up_tick}.",
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'active_time' => array(
        'description' => "The number of seconds this {up_tick} lasted.",
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'aerobic' => array(
        'description' => "A flag indicating whether this was an aeropic {up_tick} acitivity or not.",
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'calories' => array(
        'description' => "The number of calories used (or consumed) in this {up_tick}.",
        'type' => 'numeric',
        'not null' => TRUE,
        'default' => 0,
        'precision' => 21,
        'scale' => 11,
      ),
      'steps' => array(
        'description' => "The number of steps in this {up_tick}.",
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'time' => array(
        'description' => "The unix timestamp of this {up_tick}.",
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'speed' => array(
        'description' => "The average speed during this {up_tick}.",
        'type' => 'numeric',
        'not null' => TRUE,
        'default' => 0,
        'precision' => 21,
        'scale' => 11,
      ),
    ),
    'primary key' => array('tid'),
    'indexes' => array(
      'bid' => array('bid'),
      'time' => array('time'),
    ),
    'foreign keys' => array(
      'bid' => array(
        'table' => 'up_band',
        'columns' => array('bid' => 'bid'),
      ),
    ),
  );
  return $schema;
}

/**
 * Implements hook_requirements().
 */
function up_requirements($phase = 'runtime') {
  $requirements = array();

  $t = get_t();

  $requirements['up'] = array(
    'title' => $t('Jawbone UP'),
  );

  try {
    @include_once 'vendor/autoload.php';
    $up = @new \Jawbone\Up;

    $requirements['up']['value'] = $t('The Jawbone UP API library @version is installed.', array('@version' => \Jawbone\Up::Version));
    $requirements['up']['severity'] = REQUIREMENT_OK;
  } catch (Exception $e) {
    $requirements['up']['value'] = $t('The Jawbone UP API library is not installed. Please run <em>composer install</em> in the <em>up</em> module directory.');
    $requirements['up']['severity'] = REQUIREMENT_ERROR;
  }

  return $requirements;
}
