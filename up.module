<?php
/**
 * @file
 * Provides API integration with the Jawbone UP.
 */

/**
 * Load the libraries we'll use.
 */
module_load_include('php', 'up', 'include/up.crud');
module_load_include('php', 'up', 'include/up.lib');
module_load_include('php', 'up', 'vendor/autoload');

/**
 * Implements hook_permission().
 */
function up_permission() {
  return array(
    'add up wristbands' => array(
      'title' => t('Add UP wristbands'),
    ),
    'administer jawbone up' => array(
      'title' => t('Administer Jawbone UP'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function up_menu() {
  $items['up/auth'] = array(
    'title' => 'UP Auth',
    'access callback' => TRUE,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('up_auth_callback'),
    'type' => MENU_CALLBACK,
    'file' => 'up.pages.inc',
  );

  $items['admin/config/services/up'] = array(
    'title' => 'Jawbone UP API',
    'description' => 'Jawbone UP settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('up_admin_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'up.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/services/up/default'] = array(
    'title'  => 'Jawbone UP',
    'type'   => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  return $items;
}

/**
 * Form to add an UP band.
 *
 * This is displayed on the user profile edit page.
 */
function up_band_form($form, $form_state, $band) {
  if (empty($band)) {
    $form['submit'] = array(
      '#type'   => 'submit',
      '#value'  => t('Add your UP'),
      '#suffix' => '</br />' . t('You will be asked to login to your Jawbone account and grant access permissions to @site.', array('@site' => variable_get('site_name', ''))),
    );
  }
  else {
    // Fetch the token, so we cna display expiry info.
    $account = user_load($band->uid);
    $token = up_token_load_by_user($account);
    $form['refresh'] = array(
      '#type'   => 'submit',
      '#value'  => t('Refresh API token'),
    );
    $form['delete'] = array(
      '#type'   => 'submit',
      '#value'  => t('Remove UP'),
    );
    $form['other'] = array(
      '#markup'=> ''
        . '<br />' . t('The current API token expires on @expiry.', array('@expiry' => format_date($token->expires, 'long')))
        . '<br />' . t('When you remove this UP, all associated data and status will be removed as well.')
    );
  }
  return $form;
}

/**
 * Form validation for adding a new UP band.
 */
function up_band_form_validate($form, &$form_state) {
  $key = variable_get('up_client_id', '');
  $secret = variable_get('up_app_secret', '');
  if ($key == '' || $secret == '') {
    form_set_error('', t('Please configure your client id and app secret at <a href="!url">Jawbone UP settings</a>.', array( '!url' => url('admin/config/services/up'))));
  }
}

/**
 * Form submit handler for adding or removing an UP band.
 *
 * Loads UP band details and adds them to the user account
 */
function up_band_form_submit($form, &$form_state) {

  // Refreshing the token?
  if (isset($form_state['values']['refresh'])) {
    $band = $form_state['build_info']['args'][0];
    $account = user_load($band->uid);
    $token = up_token_load_by_user($account);

    $key = variable_get('up_client_id', '');
    $secret = variable_get('up_app_secret', '');

    module_load_include('php', 'up', 'up.lib');

    try {
      $auth = new JawboneAuth($key, $secret);
      $response = drupal_http_request($auth->get_token_refresh_url($token->refresh_token), array('method' => 'POST'));

      // Hurray, we have a response!
      $json = $auth->decode_response($response);

      $token->refresh_token = $json->refresh_token;
      up_token_save($token);
      drupal_set_message(t('Updated API token for @band', array('@band' => theme('band_name', array('band' => $band)))));
    } catch (Exception $e) {
      watchdog('up', 'Jawbone UP API: @error', array('@error' => (string)$e), WATCHDOG_ERROR);
      drupal_set_message(t('Jawbone UP authentication request failed'), 'error');
    }
    return;
  }

  // Deleting this band?
  if (isset($form_state['values']['delete'])) {
    // Grab all the things we're deleting.
    $band = $form_state['build_info']['args'][0];
    $account = user_load($band->uid);
    $token = up_token_load_by_user($account);

    up_summary_delete_by_band($band);
    up_band_delete($band);
    up_token_delete($token);

    drupal_set_message(t('Deleted @band', array('@band' => theme('band_name', array('band' => $band)))));
    return;
  }

  $key = variable_get('up_client_id', '');
  $secret = variable_get('up_app_secret', '');

  try {
    $auth = new JawboneAuth($key, $secret);
  } catch (JawboneAuthException $e) {
    watchdog('up', 'Jawbone UP API: @error', array('@error' => (string)$e), WATCHDOG_ERROR);
    drupal_set_message(t('Could not obtain a valid code from the Jawbone UP API. Please review the configuration.'), 'error');
    return;
  }

  // Check for the overlay.
  if (module_exists('overlay') && overlay_get_mode() == 'child') {
    overlay_close_dialog($auth->get_code_url(), array('external' => TRUE));
    overlay_deliver_empty_page();
  }
  else {
    drupal_goto($auth->get_code_url());
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function up_form_user_profile_form_alter(&$form, &$form_state) {
  $band = up_band_load_by_user($form['#user']);
  $form['#band'] = $band;

  $form['up'] = array(
    '#type'        => 'fieldset',
    '#title'       => t('Jawbone UP'),
    '#description' => (!empty($band)) ? t('Your account is linked to %band.', array('%band' => theme('up_band_name', array('band' => $band)))) : '',
    '#tree'        => TRUE,
  );

  if (user_access('add up wristbands')) {
    $form['up']['band'] = drupal_get_form('up_band_form', $band);
  }
}

/**
 * Implememts hook_user_view().
 *
 * @TODO: Maybe do this via a theme function instead?
 */
function up_user_view($account, $view_mode, $langcode) {
  if (user_access('add up wristbands', $account)) {
    if ($band = up_band_load_by_user($account)) {
      $account->content['up']['info'] = array(
        '#type'       => 'user_profile_item',
        '#title'      => t('Jawbone UP'),
        '#markup'     => t('%band is linked to this account.', array('%band' => theme('up_band_name', array('band' => $band)))),
        '#attributes' => array('class'=> array('up')),
      );
    }
  }
}

/**
 * Return the full path to an UP-hosted image.
 */
function up_image($path) {
  $delim = (strpos($path, '/') === 0) ? '' : '/';
  return UP_API_HOST . $delim . $path;
}

/**
 * Return the band profile image. Formatted for HTML output.
 *
 * @TODO: Theme function.
 */
function up_band_image($band) {
  // Early return;
  if (empty($band->image_url)) {
    return NULL;
  }

  $variables = array(
    'path' => up_image($band->image_url),
    'height' => '64',
    'width' => '64',
    'alt' => t('UP profile for @band', array('@band' => theme('up_band_name', array('band' => $band)))),
    'attributes' => array('class' => array('up')),
  );
  return theme('image', $variables);
}

/**
 * Checks if the UP keys are set.
 *
 * @return
 *   boolean TRUE if both the UP client id and app secret are set.
 */
function up_api_keys() {
  $key = variable_get('up_client_id');
  $secret = variable_get('up_app_secret');
  return !(empty($key) && empty($secret));
}

/**
 * Return a config array for the Up class.
 */
function up_api_config($token) {
  return array(
    'client_id'     => variable_get('up_client_id', ''),
    'client_secret' => variable_get('up_app_secret', ''),
    'access_token'  => $token->token,
  );
}

/**
 * Return a custom config array for the Up class.
 *
 * This config array can only be used to refresh the authentication tokens.
 */
function up_api_refresh_config($token) {
  $config = up_api_config($token);
  $config['refresh_token'] = $token->refresh_token;
  return $config;
}

/**
 * Implements hook_cron().
 *
 * @TODO: Use a batch job.
 */
function up_cron() {
  // Load all bands.
  $bands = up_band_load_all();

  // Load all enabled types.
  $types = up_summary_types(NULL, NULL, TRUE);

  foreach ($bands as $band) {
    foreach ($types as $type) {
      up_fetch_summaries($band, $type['endpoint']);
    }
  }
}

/**
 * Implements hook_theme().
 */
function up_theme() {
  return array(
    'up_band_name' => array(
      'variables' => array(
        'band' => NULL,
      ),
      'file' => 'up.theme.inc'
    ),
    'up_image_style' => array(
      'variables' => array(
        'style_name' => NULL,
        'path' => NULL,
        'width' => NULL,
        'height' => NULL,
        'alt' => '',
        'title' => NULL,
        'attributes' => array(),
      ),
      'file' => 'up.theme.inc'
    ),
  );
}

/**
 * Helper to fetch summaries and store them in the database.
 */
function up_fetch_summaries($band, $endpoint) {

  $account = user_load($band->uid);
  $token = up_token_load_by_user($account);
  $config = up_api_config($token);

  try {
    $up = new \Jawbone\Up($config);
    $data = $up->get($endpoint);
  } catch (Exception $e) {
    watchdog('up', 'Jawbone UP API: @error', array('@error' => (string)$e), WATCHDOG_ERROR);
  }

  if (empty($data['data']['items']))
    return;

  foreach ($data['data']['items'] as $item) {
    $summary = up_summary_create($item, $endpoint, $band);
    up_summary_save($summary, FALSE);
  }
}

/**
 * Implements hook_views_api().
 */
function up_views_api() {
  return array(
    'api'  => 3,
    'path' => drupal_get_path('module', 'up') . '/include/views',
  );
}

/**
 * Fetch a remote image from Jawbone and cache it locally.
 */
function up_cache_image($image) {
  if (!is_dir(drupal_realpath(UP_CACHE))) {
    drupal_mkdir(UP_CACHE);
  }

  $uri = drupal_parse_url($image);
  $filename = md5($uri['path']);

  // Create a local cache filename.
  $cache = UP_CACHE . '/' . $filename;

  if (file_exists(drupal_realpath($cache))) {
    $interval = time() - filemtime(drupal_realpath($cache));
    $refresh = ($interval > variable_get('page_cache_maximum_age', 0));
  }
  else {
    $refresh = TRUE;
  }

  // drupal_http_request doesn't cope with schema-less redirect URLs.
  $result = drupal_http_request($image, array('method' => 'HEAD'));
  if (!empty($result->redirect_code) && $result->redirect_code == 301) {
    $scheme = parse_url($uri['path'], PHP_URL_SCHEME);
    $image = $scheme . ':' . $result->redirect_url;
  }

  // Copy the image to local cache if $refresh is set, then return
  // the cached image.
  if ($remote = (strpos($image, 'http') === 0)) {
    if ($refresh) {
      $filepath = system_retrieve_file($image, $cache, FALSE, FILE_EXISTS_REPLACE);
    }
    else {
      $filepath = $cache;
    }
  }
  return $filepath;
}
